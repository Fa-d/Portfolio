import{r as u}from"./react-BM9L5BSm.js";import{u as m}from"./use-sync-external-store-BfBVZdyh.js";var b={BASE_URL:"/",DEV:!1,MODE:"production",PROD:!0,SSR:!1};const l=e=>{let t;const r=new Set,n=(c,f)=>{const a=typeof c=="function"?c(t):c;if(!Object.is(a,t)){const E=t;t=f??typeof a!="object"?a:Object.assign({},t,a),r.forEach(v=>v(t,E))}},o=()=>t,d={setState:n,getState:o,subscribe:c=>(r.add(c),()=>r.delete(c)),destroy:()=>{(b?"production":void 0)!=="production"&&console.warn("[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected."),r.clear()}};return t=e(n,o,d),d},D=e=>e?l(e):l;var g={BASE_URL:"/",DEV:!1,MODE:"production",PROD:!0,SSR:!1};const{useSyncExternalStoreWithSelector:_}=m;function p(e,t=e.getState,r){const n=_(e.subscribe,e.getState,e.getServerState||e.getState,t,r);return u.useDebugValue(n),n}const S=e=>{(g?"production":void 0)!=="production"&&typeof e!="function"&&console.warn("[DEPRECATED] Passing a vanilla store will be unsupported in a future version. Instead use `import { useStore } from 'zustand'`.");const t=typeof e=="function"?D(e):e,r=(n,o)=>p(t,n,o);return Object.assign(r,t),r},w=e=>e?S(e):S;var x={BASE_URL:"/",DEV:!1,MODE:"production",PROD:!0,SSR:!1};function h(){(x?"production":void 0)!=="production"&&console.warn("[DEPRECATED] `context` will be removed in a future version. Instead use `import { createStore, useStore } from 'zustand'`. See: https://github.com/pmndrs/zustand/discussions/1180.");const e=u.createContext(void 0);return{Provider:({createStore:o,children:i})=>{const s=u.useRef();return s.current||(s.current=o()),u.createElement(e.Provider,{value:s.current},i)},useStore:(o,i)=>{const s=u.useContext(e);if(!s)throw new Error("Seems like you have not used zustand provider as an ancestor.");return p(s,o,i)},useStoreApi:()=>{const o=u.useContext(e);if(!o)throw new Error("Seems like you have not used zustand provider as an ancestor.");return u.useMemo(()=>({...o}),[o])}}}export{w as a,h as c};
